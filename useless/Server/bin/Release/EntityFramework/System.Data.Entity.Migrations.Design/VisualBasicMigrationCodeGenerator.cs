using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Hierarchy;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Migrations.Model;
using System.Data.Entity.Migrations.Utilities;
using System.Data.Entity.Resources;
using System.Data.Entity.Spatial;
using System.Data.Entity.Utilities;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.VisualBasic;

namespace System.Data.Entity.Migrations.Design;

public class VisualBasicMigrationCodeGenerator : MigrationCodeGenerator
{
	private IEnumerable<Tuple<CreateTableOperation, AddForeignKeyOperation>> _newTableForeignKeys;

	private IEnumerable<Tuple<CreateTableOperation, CreateIndexOperation>> _newTableIndexes;

	public override ScaffoldedMigration Generate(string migrationId, IEnumerable<MigrationOperation> operations, string sourceModel, string targetModel, string @namespace, string className)
	{
		Check.NotEmpty(migrationId, "migrationId");
		Check.NotNull(operations, "operations");
		Check.NotEmpty(targetModel, "targetModel");
		Check.NotEmpty(className, "className");
		className = ScrubName(className);
		_newTableForeignKeys = (from ct in operations.OfType<CreateTableOperation>()
			from cfk in operations.OfType<AddForeignKeyOperation>()
			where ct.Name.EqualsIgnoreCase(cfk.DependentTable)
			select Tuple.Create(ct, cfk)).ToList();
		_newTableIndexes = (from ct in operations.OfType<CreateTableOperation>()
			from cfk in operations.OfType<CreateIndexOperation>()
			where ct.Name.EqualsIgnoreCase(cfk.Table)
			select Tuple.Create(ct, cfk)).ToList();
		ScaffoldedMigration scaffoldedMigration = new ScaffoldedMigration
		{
			MigrationId = migrationId,
			Language = "vb",
			UserCode = Generate(operations, @namespace, className),
			DesignerCode = Generate(migrationId, sourceModel, targetModel, @namespace, className)
		};
		if (!string.IsNullOrWhiteSpace(sourceModel))
		{
			scaffoldedMigration.Resources.Add("Source", sourceModel);
		}
		scaffoldedMigration.Resources.Add("Target", targetModel);
		return scaffoldedMigration;
	}

	protected virtual string Generate(IEnumerable<MigrationOperation> operations, string @namespace, string className)
	{
		Check.NotNull(operations, "operations");
		Check.NotEmpty(className, "className");
		using StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture);
		System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer = new System.Data.Entity.Migrations.Utilities.IndentedTextWriter(stringWriter);
		try
		{
			WriteClassStart(@namespace, className, writer, "Inherits DbMigration", designer: false, GetNamespaces(operations));
			writer.WriteLine("Public Overrides Sub Up()");
			writer.Indent++;
			operations.Except(_newTableForeignKeys.Select((Tuple<CreateTableOperation, AddForeignKeyOperation> t) => t.Item2)).Except(_newTableIndexes.Select((Tuple<CreateTableOperation, CreateIndexOperation> t) => t.Item2)).Each(delegate(dynamic o)
			{
				Generate(o, writer);
			});
			writer.Indent--;
			writer.WriteLine("End Sub");
			writer.WriteLine();
			writer.WriteLine("Public Overrides Sub Down()");
			writer.Indent++;
			operations = (from o in operations
				select o.Inverse into o
				where o != null
				select o).Reverse();
			bool num = operations.Any((MigrationOperation o) => o is NotSupportedOperation);
			operations.Where((MigrationOperation o) => !(o is NotSupportedOperation)).Each(delegate(dynamic o)
			{
				Generate(o, writer);
			});
			if (num)
			{
				writer.Write("Throw New NotSupportedException(");
				writer.Write(Generate(Strings.ScaffoldSprocInDownNotSupported));
				writer.WriteLine(")");
			}
			writer.Indent--;
			writer.WriteLine("End Sub");
			WriteClassEnd(@namespace, writer);
		}
		finally
		{
			if (writer != null)
			{
				((IDisposable)writer).Dispose();
			}
		}
		return stringWriter.ToString();
	}

	protected virtual string Generate(string migrationId, string sourceModel, string targetModel, string @namespace, string className)
	{
		Check.NotEmpty(migrationId, "migrationId");
		Check.NotEmpty(targetModel, "targetModel");
		Check.NotEmpty(className, "className");
		using StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture);
		using (System.Data.Entity.Migrations.Utilities.IndentedTextWriter indentedTextWriter = new System.Data.Entity.Migrations.Utilities.IndentedTextWriter(stringWriter))
		{
			indentedTextWriter.WriteLine("' <auto-generated />");
			WriteClassStart(@namespace, className, indentedTextWriter, "Implements IMigrationMetadata", designer: true);
			indentedTextWriter.Write("Private ReadOnly Resources As New ResourceManager(GetType(");
			indentedTextWriter.Write(className);
			indentedTextWriter.WriteLine("))");
			indentedTextWriter.WriteLine();
			WriteProperty("Id", Quote(migrationId), indentedTextWriter);
			indentedTextWriter.WriteLine();
			WriteProperty("Source", (sourceModel == null) ? null : "Resources.GetString(\"Source\")", indentedTextWriter);
			indentedTextWriter.WriteLine();
			WriteProperty("Target", "Resources.GetString(\"Target\")", indentedTextWriter);
			WriteClassEnd(@namespace, indentedTextWriter);
		}
		return stringWriter.ToString();
	}

	protected virtual void WriteProperty(string name, string value, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotEmpty(name, "name");
		Check.NotNull(writer, "writer");
		writer.Write("Private ReadOnly Property IMigrationMetadata_");
		writer.Write(name);
		writer.Write("() As String Implements IMigrationMetadata.");
		writer.WriteLine(name);
		writer.Indent++;
		writer.WriteLine("Get");
		writer.Indent++;
		writer.Write("Return ");
		writer.WriteLine(value ?? "Nothing");
		writer.Indent--;
		writer.WriteLine("End Get");
		writer.Indent--;
		writer.WriteLine("End Property");
	}

	protected virtual void WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer, bool designer)
	{
		if (designer)
		{
			writer.WriteLine("<GeneratedCode(\"EntityFramework.Migrations\", \"{0}\")>", typeof(VisualBasicMigrationCodeGenerator).Assembly().GetInformationalVersion());
		}
	}

	protected virtual void WriteClassStart(string @namespace, string className, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer, string @base, bool designer = false, IEnumerable<string> namespaces = null)
	{
		Check.NotNull(writer, "writer");
		Check.NotEmpty(className, "className");
		Check.NotEmpty(@base, "base");
		(namespaces ?? GetDefaultNamespaces(designer)).Each(delegate(string n)
		{
			writer.WriteLine("Imports " + n);
		});
		if (!designer)
		{
			writer.WriteLine("Imports Microsoft.VisualBasic");
		}
		writer.WriteLine();
		if (!string.IsNullOrWhiteSpace(@namespace))
		{
			writer.Write("Namespace ");
			writer.WriteLine(@namespace);
			writer.Indent++;
		}
		WriteClassAttributes(writer, designer);
		writer.Write("Public ");
		if (designer)
		{
			writer.Write("NotInheritable ");
		}
		writer.Write("Partial Class ");
		writer.Write(className);
		writer.WriteLine();
		writer.Indent++;
		writer.WriteLine(@base);
		writer.Indent--;
		writer.WriteLine();
		writer.Indent++;
	}

	protected virtual void WriteClassEnd(string @namespace, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(writer, "writer");
		writer.Indent--;
		writer.WriteLine("End Class");
		if (!string.IsNullOrWhiteSpace(@namespace))
		{
			writer.Indent--;
			writer.WriteLine("End Namespace");
		}
	}

	protected virtual void Generate(AddColumnOperation addColumnOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(addColumnOperation, "addColumnOperation");
		Check.NotNull(writer, "writer");
		writer.Write("AddColumn(");
		writer.Write(Quote(addColumnOperation.Table));
		writer.Write(", ");
		writer.Write(Quote(addColumnOperation.Column.Name));
		writer.Write(", Function(c)");
		Generate(addColumnOperation.Column, writer);
		writer.WriteLine(")");
	}

	protected virtual void Generate(DropColumnOperation dropColumnOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(dropColumnOperation, "dropColumnOperation");
		Check.NotNull(writer, "writer");
		writer.Write("DropColumn(");
		writer.Write(Quote(dropColumnOperation.Table));
		writer.Write(", ");
		writer.Write(Quote(dropColumnOperation.Name));
		if (dropColumnOperation.RemovedAnnotations.Any())
		{
			writer.Indent++;
			writer.WriteLine(",");
			writer.Write("removedAnnotations := ");
			GenerateAnnotations(dropColumnOperation.RemovedAnnotations, writer);
			writer.Indent--;
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(AlterColumnOperation alterColumnOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(alterColumnOperation, "alterColumnOperation");
		Check.NotNull(writer, "writer");
		writer.Write("AlterColumn(");
		writer.Write(Quote(alterColumnOperation.Table));
		writer.Write(", ");
		writer.Write(Quote(alterColumnOperation.Column.Name));
		writer.Write(", Function(c)");
		Generate(alterColumnOperation.Column, writer);
		writer.WriteLine(")");
	}

	protected internal virtual void GenerateAnnotations(IDictionary<string, object> annotations, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(annotations, "annotations");
		Check.NotNull(writer, "writer");
		writer.WriteLine("New Dictionary(Of String, Object)() From _");
		writer.WriteLine("{");
		writer.Indent++;
		string[] array = annotations.Keys.OrderBy((string k) => k).ToArray();
		for (int i = 0; i < array.Length; i++)
		{
			writer.Write("{ ");
			writer.Write(Quote(array[i]) + ", ");
			GenerateAnnotation(array[i], annotations[array[i]], writer);
			writer.WriteLine((i < array.Length - 1) ? " }," : " }");
		}
		writer.Indent--;
		writer.Write("}");
	}

	protected internal virtual void GenerateAnnotations(IDictionary<string, AnnotationValues> annotations, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(annotations, "annotations");
		Check.NotNull(writer, "writer");
		writer.WriteLine("New Dictionary(Of String, AnnotationValues)() From _");
		writer.WriteLine("{");
		writer.Indent++;
		if (annotations != null)
		{
			string[] array = annotations.Keys.OrderBy((string k) => k).ToArray();
			for (int i = 0; i < array.Length; i++)
			{
				writer.WriteLine("{");
				writer.Indent++;
				writer.WriteLine(Quote(array[i]) + ",");
				writer.Write("New AnnotationValues(oldValue := ");
				GenerateAnnotation(array[i], annotations[array[i]].OldValue, writer);
				writer.Write(", newValue := ");
				GenerateAnnotation(array[i], annotations[array[i]].NewValue, writer);
				writer.WriteLine(")");
				writer.Indent--;
				writer.WriteLine((i < array.Length - 1) ? " }," : " }");
			}
		}
		writer.Indent--;
		writer.Write("}");
	}

	protected internal virtual void GenerateAnnotation(string name, object annotation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotEmpty(name, "name");
		Check.NotNull(writer, "writer");
		Func<AnnotationCodeGenerator> value;
		if (annotation == null)
		{
			writer.Write("Nothing");
		}
		else if (AnnotationGenerators.TryGetValue(name, out value) && value != null)
		{
			value().Generate(name, annotation, writer);
		}
		else
		{
			writer.Write(Quote(annotation.ToString()));
		}
	}

	protected virtual void Generate(CreateProcedureOperation createProcedureOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(createProcedureOperation, "createProcedureOperation");
		Check.NotNull(writer, "writer");
		Generate(createProcedureOperation, "CreateStoredProcedure", writer);
	}

	protected virtual void Generate(AlterProcedureOperation alterProcedureOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(alterProcedureOperation, "alterProcedureOperation");
		Check.NotNull(writer, "writer");
		Generate(alterProcedureOperation, "AlterStoredProcedure", writer);
	}

	private void Generate(ProcedureOperation procedureOperation, string methodName, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		writer.Write(methodName);
		writer.WriteLine("(");
		writer.Indent++;
		writer.Write(Quote(procedureOperation.Name));
		writer.WriteLine(",");
		if (procedureOperation.Parameters.Any())
		{
			writer.WriteLine("Function(p) New With");
			writer.Indent++;
			writer.WriteLine("{");
			writer.Indent++;
			procedureOperation.Parameters.Each(delegate(ParameterModel p, int i)
			{
				string text = ScrubName(p.Name);
				writer.Write(".");
				writer.Write(text);
				writer.Write(" =");
				Generate(p, writer, !string.Equals(p.Name, text, StringComparison.Ordinal));
				if (i < procedureOperation.Parameters.Count - 1)
				{
					writer.Write(",");
				}
				writer.WriteLine();
			});
			writer.Indent--;
			writer.WriteLine("},");
			writer.Indent--;
		}
		writer.Write("body :=");
		if (!string.IsNullOrWhiteSpace(procedureOperation.BodySql))
		{
			writer.WriteLine();
			writer.Indent++;
			string newValue = "\" & vbCrLf & _" + writer.NewLine + writer.CurrentIndentation() + "\"";
			writer.WriteLine(Generate(procedureOperation.BodySql.Replace(Environment.NewLine, newValue)));
			writer.Indent--;
		}
		else
		{
			writer.WriteLine(" \"\"");
		}
		writer.Indent--;
		writer.WriteLine(")");
		writer.WriteLine();
	}

	protected virtual void Generate(ParameterModel parameterModel, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer, bool emitName = false)
	{
		Check.NotNull(parameterModel, "parameterModel");
		Check.NotNull(writer, "writer");
		writer.Write(" p.");
		writer.Write(TranslateColumnType(parameterModel.Type));
		writer.Write("(");
		List<string> list = new List<string>();
		if (emitName)
		{
			list.Add("name := " + Quote(parameterModel.Name));
		}
		if (parameterModel.MaxLength.HasValue)
		{
			list.Add("maxLength := " + parameterModel.MaxLength);
		}
		if (parameterModel.Precision.HasValue)
		{
			list.Add("precision := " + parameterModel.Precision);
		}
		if (parameterModel.Scale.HasValue)
		{
			list.Add("scale := " + parameterModel.Scale);
		}
		if (parameterModel.IsFixedLength.HasValue)
		{
			list.Add("fixedLength := " + parameterModel.IsFixedLength.ToString().ToLowerInvariant());
		}
		if (parameterModel.IsUnicode.HasValue)
		{
			list.Add("unicode := " + parameterModel.IsUnicode.ToString().ToLowerInvariant());
		}
		if (parameterModel.DefaultValue != null)
		{
			list.Add("defaultValue := " + Generate((dynamic)parameterModel.DefaultValue));
		}
		if (!string.IsNullOrWhiteSpace(parameterModel.DefaultValueSql))
		{
			list.Add("defaultValueSql := " + Quote(parameterModel.DefaultValueSql));
		}
		if (!string.IsNullOrWhiteSpace(parameterModel.StoreType))
		{
			list.Add("storeType := " + Quote(parameterModel.StoreType));
		}
		if (parameterModel.IsOutParameter)
		{
			list.Add("outParameter := True");
		}
		writer.Write(list.Join());
		writer.Write(")");
	}

	protected virtual void Generate(DropProcedureOperation dropProcedureOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(dropProcedureOperation, "dropProcedureOperation");
		Check.NotNull(writer, "writer");
		writer.Write("DropStoredProcedure(");
		writer.Write(Quote(dropProcedureOperation.Name));
		writer.WriteLine(")");
	}

	protected virtual void Generate(CreateTableOperation createTableOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(createTableOperation, "createTableOperation");
		Check.NotNull(writer, "writer");
		writer.WriteLine("CreateTable(");
		writer.Indent++;
		writer.Write(Quote(createTableOperation.Name));
		writer.WriteLine(",");
		writer.WriteLine("Function(c) New With");
		writer.Indent++;
		writer.WriteLine("{");
		writer.Indent++;
		int columnCount = createTableOperation.Columns.Count();
		createTableOperation.Columns.Each(delegate(ColumnModel c, int i)
		{
			string text = ScrubName(c.Name);
			writer.Write(".");
			writer.Write(text);
			writer.Write(" =");
			Generate(c, writer, !string.Equals(c.Name, text, StringComparison.Ordinal));
			if (i < columnCount - 1)
			{
				writer.Write(",");
			}
			writer.WriteLine();
		});
		writer.Indent--;
		writer.Write("}");
		writer.Indent--;
		if (createTableOperation.Annotations.Any())
		{
			writer.WriteLine(",");
			writer.Write("annotations := ");
			GenerateAnnotations(createTableOperation.Annotations, writer);
		}
		writer.Write(")");
		GenerateInline(createTableOperation.PrimaryKey, writer);
		_newTableForeignKeys.Where((Tuple<CreateTableOperation, AddForeignKeyOperation> t) => t.Item1 == createTableOperation).Each(delegate(Tuple<CreateTableOperation, AddForeignKeyOperation> t)
		{
			GenerateInline(t.Item2, writer);
		});
		_newTableIndexes.Where((Tuple<CreateTableOperation, CreateIndexOperation> t) => t.Item1 == createTableOperation).Each(delegate(Tuple<CreateTableOperation, CreateIndexOperation> t)
		{
			GenerateInline(t.Item2, writer);
		});
		writer.WriteLine();
		writer.Indent--;
		writer.WriteLine();
	}

	protected internal virtual void Generate(AlterTableOperation alterTableOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(alterTableOperation, "alterTableOperation");
		Check.NotNull(writer, "writer");
		writer.WriteLine("AlterTableAnnotations(");
		writer.Indent++;
		writer.Write(Quote(alterTableOperation.Name));
		writer.WriteLine(",");
		writer.WriteLine("Function(c) New With");
		writer.Indent++;
		writer.WriteLine("{");
		writer.Indent++;
		int columnCount = alterTableOperation.Columns.Count();
		alterTableOperation.Columns.Each(delegate(ColumnModel c, int i)
		{
			string text = ScrubName(c.Name);
			writer.Write(".");
			writer.Write(text);
			writer.Write(" =");
			Generate(c, writer, !string.Equals(c.Name, text, StringComparison.Ordinal));
			if (i < columnCount - 1)
			{
				writer.Write(",");
			}
			writer.WriteLine();
		});
		writer.Indent--;
		writer.Write("}");
		writer.Indent--;
		if (alterTableOperation.Annotations.Any())
		{
			writer.WriteLine(",");
			writer.Write("annotations := ");
			GenerateAnnotations(alterTableOperation.Annotations, writer);
		}
		writer.Write(")");
		writer.WriteLine();
		writer.Indent--;
		writer.WriteLine();
	}

	protected virtual void GenerateInline(AddPrimaryKeyOperation addPrimaryKeyOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(writer, "writer");
		if (addPrimaryKeyOperation != null)
		{
			writer.WriteLine(" _");
			writer.Write(".PrimaryKey(");
			Generate(addPrimaryKeyOperation.Columns, writer);
			if (!addPrimaryKeyOperation.HasDefaultName)
			{
				writer.Write(", name := ");
				writer.Write(Quote(addPrimaryKeyOperation.Name));
			}
			if (!addPrimaryKeyOperation.IsClustered)
			{
				writer.Write(", clustered := False");
			}
			writer.Write(")");
		}
	}

	protected virtual void GenerateInline(AddForeignKeyOperation addForeignKeyOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(addForeignKeyOperation, "addForeignKeyOperation");
		Check.NotNull(writer, "writer");
		writer.WriteLine(" _");
		writer.Write(".ForeignKey(" + Quote(addForeignKeyOperation.PrincipalTable) + ", ");
		Generate(addForeignKeyOperation.DependentColumns, writer);
		if (addForeignKeyOperation.CascadeDelete)
		{
			writer.Write(", cascadeDelete := True");
		}
		writer.Write(")");
	}

	protected virtual void GenerateInline(CreateIndexOperation createIndexOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(createIndexOperation, "createIndexOperation");
		Check.NotNull(writer, "writer");
		writer.WriteLine(" _");
		writer.Write(".Index(");
		Generate(createIndexOperation.Columns, writer);
		WriteIndexParameters(createIndexOperation, writer);
		writer.Write(")");
	}

	protected virtual void Generate(IEnumerable<string> columns, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(columns, "columns");
		Check.NotNull(writer, "writer");
		writer.Write("Function(t) ");
		if (columns.Count() == 1)
		{
			writer.Write("t." + ScrubName(columns.Single()));
			return;
		}
		writer.Write("New With { " + columns.Join((string c) => "t." + ScrubName(c)) + " }");
	}

	protected virtual void Generate(AddForeignKeyOperation addForeignKeyOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(addForeignKeyOperation, "addForeignKeyOperation");
		Check.NotNull(writer, "writer");
		writer.Write("AddForeignKey(");
		writer.Write(Quote(addForeignKeyOperation.DependentTable));
		writer.Write(", ");
		bool flag = addForeignKeyOperation.DependentColumns.Count() > 1;
		if (flag)
		{
			writer.Write("New String() { ");
		}
		writer.Write(addForeignKeyOperation.DependentColumns.Join(Quote));
		if (flag)
		{
			writer.Write(" }");
		}
		writer.Write(", ");
		writer.Write(Quote(addForeignKeyOperation.PrincipalTable));
		if (addForeignKeyOperation.PrincipalColumns.Any())
		{
			writer.Write(", ");
			if (flag)
			{
				writer.Write("New String() { ");
			}
			writer.Write(addForeignKeyOperation.PrincipalColumns.Join(Quote));
			if (flag)
			{
				writer.Write(" }");
			}
		}
		if (addForeignKeyOperation.CascadeDelete)
		{
			writer.Write(", cascadeDelete := True");
		}
		if (!addForeignKeyOperation.HasDefaultName)
		{
			writer.Write(", name := ");
			writer.Write(Quote(addForeignKeyOperation.Name));
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(DropForeignKeyOperation dropForeignKeyOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(dropForeignKeyOperation, "dropForeignKeyOperation");
		Check.NotNull(writer, "writer");
		writer.Write("DropForeignKey(");
		writer.Write(Quote(dropForeignKeyOperation.DependentTable));
		writer.Write(", ");
		if (!dropForeignKeyOperation.HasDefaultName)
		{
			writer.Write(Quote(dropForeignKeyOperation.Name));
		}
		else
		{
			bool num = dropForeignKeyOperation.DependentColumns.Count() > 1;
			if (num)
			{
				writer.Write("New String() { ");
			}
			writer.Write(dropForeignKeyOperation.DependentColumns.Join(Quote));
			if (num)
			{
				writer.Write(" }");
			}
			writer.Write(", ");
			writer.Write(Quote(dropForeignKeyOperation.PrincipalTable));
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(AddPrimaryKeyOperation addPrimaryKeyOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(addPrimaryKeyOperation, "addPrimaryKeyOperation");
		Check.NotNull(writer, "writer");
		writer.Write("AddPrimaryKey(");
		writer.Write(Quote(addPrimaryKeyOperation.Table));
		writer.Write(", ");
		bool num = addPrimaryKeyOperation.Columns.Count() > 1;
		if (num)
		{
			writer.Write("New String() { ");
		}
		writer.Write(addPrimaryKeyOperation.Columns.Join(Quote));
		if (num)
		{
			writer.Write(" }");
		}
		if (!addPrimaryKeyOperation.HasDefaultName)
		{
			writer.Write(", name := ");
			writer.Write(Quote(addPrimaryKeyOperation.Name));
		}
		if (!addPrimaryKeyOperation.IsClustered)
		{
			writer.Write(", clustered := False");
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(DropPrimaryKeyOperation dropPrimaryKeyOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(dropPrimaryKeyOperation, "dropPrimaryKeyOperation");
		Check.NotNull(writer, "writer");
		writer.Write("DropPrimaryKey(");
		writer.Write(Quote(dropPrimaryKeyOperation.Table));
		if (!dropPrimaryKeyOperation.HasDefaultName)
		{
			writer.Write(", name := ");
			writer.Write(Quote(dropPrimaryKeyOperation.Name));
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(CreateIndexOperation createIndexOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(createIndexOperation, "createIndexOperation");
		Check.NotNull(writer, "writer");
		writer.Write("CreateIndex(");
		writer.Write(Quote(createIndexOperation.Table));
		writer.Write(", ");
		bool num = createIndexOperation.Columns.Count() > 1;
		if (num)
		{
			writer.Write("New String() { ");
		}
		writer.Write(createIndexOperation.Columns.Join(Quote));
		if (num)
		{
			writer.Write(" }");
		}
		WriteIndexParameters(createIndexOperation, writer);
		writer.WriteLine(")");
	}

	private void WriteIndexParameters(CreateIndexOperation createIndexOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		if (createIndexOperation.IsUnique)
		{
			writer.Write(", unique := True");
		}
		if (createIndexOperation.IsClustered)
		{
			writer.Write(", clustered := True");
		}
		if (!createIndexOperation.HasDefaultName)
		{
			writer.Write(", name := ");
			writer.Write(Quote(createIndexOperation.Name));
		}
	}

	protected virtual void Generate(DropIndexOperation dropIndexOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(dropIndexOperation, "dropIndexOperation");
		Check.NotNull(writer, "writer");
		writer.Write("DropIndex(");
		writer.Write(Quote(dropIndexOperation.Table));
		writer.Write(", ");
		if (!dropIndexOperation.HasDefaultName)
		{
			writer.Write(Quote(dropIndexOperation.Name));
		}
		else
		{
			writer.Write("New String() { ");
			writer.Write(dropIndexOperation.Columns.Join(Quote));
			writer.Write(" }");
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(ColumnModel column, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer, bool emitName = false)
	{
		Check.NotNull(column, "column");
		Check.NotNull(writer, "writer");
		writer.Write(" c.");
		writer.Write(TranslateColumnType(column.Type));
		writer.Write("(");
		List<string> list = new List<string>();
		if (emitName)
		{
			list.Add("name := " + Quote(column.Name));
		}
		if (column.IsNullable == false)
		{
			list.Add("nullable := False");
		}
		if (column.MaxLength.HasValue)
		{
			list.Add("maxLength := " + column.MaxLength);
		}
		if (column.Precision.HasValue)
		{
			list.Add("precision := " + column.Precision);
		}
		if (column.Scale.HasValue)
		{
			list.Add("scale := " + column.Scale);
		}
		if (column.IsFixedLength.HasValue)
		{
			list.Add("fixedLength := " + column.IsFixedLength.ToString().ToLowerInvariant());
		}
		if (column.IsUnicode.HasValue)
		{
			list.Add("unicode := " + column.IsUnicode.ToString().ToLowerInvariant());
		}
		if (column.IsIdentity)
		{
			list.Add("identity := True");
		}
		if (column.DefaultValue != null)
		{
			list.Add("defaultValue := " + Generate((dynamic)column.DefaultValue));
		}
		if (!string.IsNullOrWhiteSpace(column.DefaultValueSql))
		{
			list.Add("defaultValueSql := " + Quote(column.DefaultValueSql));
		}
		if (column.IsTimestamp)
		{
			list.Add("timestamp := True");
		}
		if (!string.IsNullOrWhiteSpace(column.StoreType))
		{
			list.Add("storeType := " + Quote(column.StoreType));
		}
		writer.Write(list.Join());
		if (column.Annotations.Any())
		{
			writer.Indent++;
			writer.WriteLine(list.Any() ? "," : "");
			writer.Write("annotations := ");
			GenerateAnnotations(column.Annotations, writer);
			writer.Indent--;
		}
		writer.Write(")");
	}

	protected virtual string Generate(byte[] defaultValue)
	{
		return "New Byte() {" + defaultValue.Join() + "}";
	}

	protected virtual string Generate(DateTime defaultValue)
	{
		return "New DateTime(" + defaultValue.Ticks + ", DateTimeKind." + Enum.GetName(typeof(DateTimeKind), defaultValue.Kind) + ")";
	}

	protected virtual string Generate(DateTimeOffset defaultValue)
	{
		return "New DateTimeOffset(" + defaultValue.Ticks + ", new TimeSpan(" + defaultValue.Offset.Ticks + "))";
	}

	protected virtual string Generate(decimal defaultValue)
	{
		return defaultValue.ToString(CultureInfo.InvariantCulture) + "D";
	}

	protected virtual string Generate(Guid defaultValue)
	{
		Guid guid = defaultValue;
		return "New Guid(\"" + guid.ToString() + "\")";
	}

	protected virtual string Generate(long defaultValue)
	{
		return defaultValue.ToString(CultureInfo.InvariantCulture);
	}

	protected virtual string Generate(float defaultValue)
	{
		return defaultValue.ToString(CultureInfo.InvariantCulture) + "F";
	}

	protected virtual string Generate(string defaultValue)
	{
		return Quote(defaultValue);
	}

	protected virtual string Generate(TimeSpan defaultValue)
	{
		return "New TimeSpan(" + defaultValue.Ticks + ")";
	}

	protected virtual string Generate(HierarchyId defaultValue)
	{
		return "New HierarchyId(\"" + defaultValue?.ToString() + "\")";
	}

	protected virtual string Generate(DbGeography defaultValue)
	{
		return "DbGeography.FromText(\"" + defaultValue.AsText() + "\", " + defaultValue.CoordinateSystemId + ")";
	}

	protected virtual string Generate(DbGeometry defaultValue)
	{
		return "DbGeometry.FromText(\"" + defaultValue.AsText() + "\", " + defaultValue.CoordinateSystemId + ")";
	}

	protected virtual string Generate(object defaultValue)
	{
		return string.Format(CultureInfo.InvariantCulture, "{0}", new object[1] { defaultValue }).ToLowerInvariant();
	}

	protected virtual void Generate(DropTableOperation dropTableOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(dropTableOperation, "dropTableOperation");
		Check.NotNull(writer, "writer");
		writer.Write("DropTable(");
		writer.Write(Quote(dropTableOperation.Name));
		if (dropTableOperation.RemovedAnnotations.Any())
		{
			writer.Indent++;
			writer.WriteLine(",");
			writer.Write("removedAnnotations := ");
			GenerateAnnotations(dropTableOperation.RemovedAnnotations, writer);
			writer.Indent--;
		}
		IDictionary<string, IDictionary<string, object>> removedColumnAnnotations = dropTableOperation.RemovedColumnAnnotations;
		if (removedColumnAnnotations.Any())
		{
			writer.Indent++;
			writer.WriteLine(",");
			writer.Write("removedColumnAnnotations := ");
			writer.WriteLine("New Dictionary(Of String, IDictionary(Of String, Object)) From _");
			writer.WriteLine("{");
			writer.Indent++;
			string[] array = removedColumnAnnotations.Keys.OrderBy((string k) => k).ToArray();
			for (int i = 0; i < array.Length; i++)
			{
				writer.WriteLine("{");
				writer.Indent++;
				writer.WriteLine(Quote(array[i]) + ",");
				GenerateAnnotations(removedColumnAnnotations[array[i]], writer);
				writer.WriteLine();
				writer.Indent--;
				writer.WriteLine((i < array.Length - 1) ? " }," : " }");
			}
			writer.Indent--;
			writer.Write("}");
			writer.Indent--;
		}
		writer.WriteLine(")");
	}

	protected virtual void Generate(MoveTableOperation moveTableOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(moveTableOperation, "moveTableOperation");
		Check.NotNull(writer, "writer");
		writer.Write("MoveTable(name := ");
		writer.Write(Quote(moveTableOperation.Name));
		writer.Write(", newSchema := ");
		writer.Write(string.IsNullOrWhiteSpace(moveTableOperation.NewSchema) ? "Nothing" : Quote(moveTableOperation.NewSchema));
		writer.WriteLine(")");
	}

	protected virtual void Generate(MoveProcedureOperation moveProcedureOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(moveProcedureOperation, "moveProcedureOperation");
		Check.NotNull(writer, "writer");
		writer.Write("MoveStoredProcedure(name := ");
		writer.Write(Quote(moveProcedureOperation.Name));
		writer.Write(", newSchema := ");
		writer.Write(string.IsNullOrWhiteSpace(moveProcedureOperation.NewSchema) ? "Nothing" : Quote(moveProcedureOperation.NewSchema));
		writer.WriteLine(")");
	}

	protected virtual void Generate(RenameTableOperation renameTableOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(renameTableOperation, "renameTableOperation");
		Check.NotNull(writer, "writer");
		writer.Write("RenameTable(name := ");
		writer.Write(Quote(renameTableOperation.Name));
		writer.Write(", newName := ");
		writer.Write(Quote(renameTableOperation.NewName));
		writer.WriteLine(")");
	}

	protected virtual void Generate(RenameProcedureOperation renameProcedureOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(renameProcedureOperation, "renameProcedureOperation");
		Check.NotNull(writer, "writer");
		writer.Write("RenameStoredProcedure(name := ");
		writer.Write(Quote(renameProcedureOperation.Name));
		writer.Write(", newName := ");
		writer.Write(Quote(renameProcedureOperation.NewName));
		writer.WriteLine(")");
	}

	protected virtual void Generate(RenameColumnOperation renameColumnOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(renameColumnOperation, "renameColumnOperation");
		Check.NotNull(writer, "writer");
		writer.Write("RenameColumn(table := ");
		writer.Write(Quote(renameColumnOperation.Table));
		writer.Write(", name := ");
		writer.Write(Quote(renameColumnOperation.Name));
		writer.Write(", newName := ");
		writer.Write(Quote(renameColumnOperation.NewName));
		writer.WriteLine(")");
	}

	protected virtual void Generate(RenameIndexOperation renameIndexOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(renameIndexOperation, "renameIndexOperation");
		Check.NotNull(writer, "writer");
		writer.Write("RenameIndex(table := ");
		writer.Write(Quote(renameIndexOperation.Table));
		writer.Write(", name := ");
		writer.Write(Quote(renameIndexOperation.Name));
		writer.Write(", newName := ");
		writer.Write(Quote(renameIndexOperation.NewName));
		writer.WriteLine(")");
	}

	protected virtual void Generate(SqlOperation sqlOperation, System.Data.Entity.Migrations.Utilities.IndentedTextWriter writer)
	{
		Check.NotNull(sqlOperation, "sqlOperation");
		Check.NotNull(writer, "writer");
		writer.Write("Sql(");
		writer.Write(Quote(sqlOperation.Sql));
		if (sqlOperation.SuppressTransaction)
		{
			writer.Write(", suppressTransaction := True");
		}
		writer.WriteLine(")");
	}

	protected virtual string ScrubName(string name)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Expected O, but got Unknown
		Check.NotEmpty(name, "name");
		name = new Regex("[^\\p{Ll}\\p{Lu}\\p{Lt}\\p{Lo}\\p{Nd}\\p{Nl}\\p{Mn}\\p{Mc}\\p{Cf}\\p{Pc}\\p{Lm}]").Replace(name, string.Empty);
		VBCodeProvider val = new VBCodeProvider();
		try
		{
			if ((!char.IsLetter(name[0]) && name[0] != '_') || !((CodeDomProvider)val).IsValidIdentifier(name))
			{
				name = "_" + name;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return name;
	}

	protected virtual string TranslateColumnType(PrimitiveTypeKind primitiveTypeKind)
	{
		return primitiveTypeKind switch
		{
			PrimitiveTypeKind.Int16 => "Short", 
			PrimitiveTypeKind.Int32 => "Int", 
			PrimitiveTypeKind.Int64 => "Long", 
			_ => Enum.GetName(typeof(PrimitiveTypeKind), primitiveTypeKind), 
		};
	}

	protected virtual string Quote(string identifier)
	{
		return "\"" + identifier + "\"";
	}
}
